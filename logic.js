
let selected = null;

const feedbackText = {
  scenario1: {
    A: "‚úÖ Richtige Ma√ünahme zum fr√ºhestm√∂glichen Zeitpunkt. Die Isolation verhindert potenzielle Weiterverbreitung.",
    B: "‚ö†Ô∏è Beobachten bei aktiver Ransomware birgt hohes Risiko.",
    C: "üîÑ Automatisiertes Containment ist effizient, aber potenziell riskant.",
    D: "‚ùå Keine Reaktion kann zu unkontrollierter Ausbreitung f√ºhren."
  },
  scenario2: {
    A: "üîÑ Begrenzte Ma√ünahme mit Beobachtung.",
    B: "‚úÖ Kritischer Server wird sofort gesch√ºtzt ‚Äì gute Eind√§mmung.",
    C: "‚ö†Ô∏è Hoher Produktionsimpact ‚Äì m√∂glicherweise √ºberzogen.",
    D: "‚ùå Verz√∂gerte Ma√ünahmen riskieren weitere Infektionen."
  },
  scenario3: {
    A: "‚úÖ Schnelles Handeln sch√ºtzt sensible Daten.",
    B: "‚ö†Ô∏è Abwarten bei Datenabfluss kann rechtliche Folgen haben.",
    C: "‚ùå Risiko, Beweise zu sp√§t zu sichern.",
    D: "üîÑ Proaktive Ma√ünahme, aber nicht abgestimmt auf Exfiltration."
  },
  scenario4: {
    A: "‚úÖ Aktive Sicherung zentraler Infrastruktur.",
    B: "üîÑ Gute Wiederherstellungsstrategie, aber nicht sofort wirksam.",
    C: "‚ùå Passivit√§t bei kritischer Infrastruktur riskant.",
    D: "‚ö†Ô∏è Entscheidung vertagen kann gef√§hrlich werden."
  },
  scenario5: {
    A: "‚úÖ Bestm√∂glicher Schutz auf Kosten der Produktion.",
    B: "üîÑ Kompromiss zwischen Verf√ºgbarkeit und Sicherheit.",
    C: "‚ö†Ô∏è Verz√∂gerte Entscheidung kann Ausbreitung zulassen.",
    D: "‚ùå Air Gap zu sp√§t = Kontrollverlust."
  }
};

function selectOption(id) {
  selected = id;
  document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
  const idx = ['A','B','C','D'].indexOf(id);
  document.querySelectorAll('.option')[idx].classList.add('selected');
}

function submitDecision() {
  if (!selected) {
    alert("Bitte w√§hlen Sie eine Ma√ünahme aus.");
    return;
  }
  const explanation = document.getElementById('explanation')?.value || "";
  const feedbackBox = document.getElementById('feedback');
  const sid = typeof scenarioId !== 'undefined' ? scenarioId : 'scenario1';
  feedbackBox.style.display = 'block';
  feedbackBox.textContent = feedbackText[sid][selected];

  const decision = {
    answer: selected,
    explanation: explanation
  };
  localStorage.setItem(sid, JSON.stringify(decision));
}

// Zusammenfassung anzeigen
function displaySummary() {
  const container = document.getElementById('summary');
  if (!container) return;

  let html = '';
  let score = 0;
  let total = 0;
  const optimal = { scenario1: 'A', scenario2: 'B', scenario3: 'A', scenario4: 'A', scenario5: 'A' };

  for (let i = 1; i <= 5; i++) {
    const key = `scenario${i}`;
    const data = JSON.parse(localStorage.getItem(key));
    if (data) {
      const correct = data.answer === optimal[key];
      if (correct) score++;
      total++;
      html += `<div style="margin-bottom:20px;">
        <strong>${key.toUpperCase()}:</strong><br>
        Ihre Entscheidung: <code>${data.answer}</code><br>
        Begr√ºndung: <em>${data.explanation || 'Keine Angabe'}</em><br>
        <span>${feedbackText[key][data.answer]}</span>
      </div>`;
    }
  }

  let outcome = "";
  if (score === 5) {
    outcome = "üèÜ Exzellente Containment-Strategie. Der Angriff wurde fr√ºh erkannt und vollst√§ndig unter Kontrolle gebracht.";
  } else if (score >= 4) {
    outcome = "‚úÖ Sehr gute Arbeit mit nur kleinen Schw√§chen. Die Ausbreitung konnte √ºberwiegend gestoppt werden.";
  } else if (score >= 3) {
    outcome = "‚ö†Ô∏è Solide Entscheidungen mit klaren Optimierungsm√∂glichkeiten. Es kam zu Zwischenf√§llen.";
  } else {
    outcome = "‚ùå Kritische Vers√§umnisse. Die Ransomware konnte zentrale Systeme beeintr√§chtigen.";
  }

  container.innerHTML = `<h3>Strategische Bewertung</h3><p>${outcome}</p><hr>` + html;
}

// PDF generieren
function generatePDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  const container = document.getElementById('summary');
  if (!container) return;

  const lines = container.innerText.split('\n');
  let y = 10;
  lines.forEach(line => {
    doc.text(line, 10, y);
    y += 8;
  });

  doc.save('Containment-Simulation-Ergebnis.pdf');
}

// Automatisch Summary anzeigen
window.onload = function () {
  displaySummary();
};
